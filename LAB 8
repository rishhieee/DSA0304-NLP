import random
from collections import defaultdict

class SimplePOSTagger:
    def __init__(self):
        self.transition_probs = defaultdict(lambda: defaultdict(float))
        self.emission_probs = defaultdict(lambda: defaultdict(float))
        self.tag_counts = defaultdict(int)

    def train(self, sentences):
        for sentence in sentences:
            previous_tag = None
            for word, tag in sentence:
                self.tag_counts[tag] += 1
                self.emission_probs[tag][word] += 1
                if previous_tag is not None:
                    self.transition_probs[previous_tag][tag] += 1
                previous_tag = tag

        for tag in self.emission_probs:
            total_count = sum(self.emission_probs[tag].values())
            for word in self.emission_probs[tag]:
                self.emission_probs[tag][word] /= total_count

        for tag in self.transition_probs:
            total_count = sum(self.transition_probs[tag].values())
            for next_tag in self.transition_probs[tag]:
                self.transition_probs[tag][next_tag] /= total_count

    def tag(self, sentence):
        tags = []
        previous_tag = None
        for word in sentence:
            if previous_tag is None:
                tag = max(self.tag_counts, key=lambda t: self.emission_probs[t].get(word, 0))
            else:
                tag = max(self.transition_probs[previous_tag], key=lambda t: self.emission_probs[t].get(word, 0))
            tags.append(tag)
            previous_tag = tag
        return tags

# Example usage
sentences = [
    [('the', 'DET'), ('cat', 'NOUN'), ('sits', 'VERB')],
    [('a', 'DET'), ('dog', 'NOUN'), ('barks', 'VERB')]
]

tagger = SimplePOSTagger()
tagger.train(sentences)

test_sentence = ['the', 'dog', 'sits']
print(tagger.tag(test_sentence))

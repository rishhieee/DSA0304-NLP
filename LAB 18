import re

def parse_fopc(expression):
    tokens = re.findall(r'[A-Za-z]+|\(|\)|,|~|&|\||=>|<=>', expression)
    stack = []
    output = []
    precedence = {'~': 3, '&': 2, '|': 2, '=>': 1, '<=>': 1}

    for token in tokens:
        if re.match(r'[A-Za-z]+', token):
            output.append(token)
        elif token in precedence:
            while stack and stack[-1] in precedence and precedence[stack[-1]] >= precedence[token]:
                output.append(stack.pop())
            stack.append(token)
        elif token == '(':
            stack.append(token)
        elif token == ')':
            while stack and stack[-1] != '(':
                output.append(stack.pop())
            stack.pop()
    while stack:
        output.append(stack.pop())
    return output

expression = "(P(x) & Q(y)) => R(z)"
print("Postfix:", parse_fopc(expression))
